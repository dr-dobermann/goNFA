name: CI/CD Pipeline

on: 
  push:
    branches:
      - master
      - 'dev/**'
  pull_request:
    branches:
      - master

permissions:
  contents: read

jobs:
  check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Verify dependencies
        run: go mod verify

      - name: Build library
        run: go build -v ./pkg/...

      - name: Install mockery
        run: go install github.com/vektra/mockery/v3@v3.5.5

      - name: Generate mocks
        run: mockery

      - name: Run vet
        run: go vet ./pkg/...

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./pkg/...

      - name: Lint with golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Build examples
        run: |
          mkdir -p bin
          go build -o bin/document_workflow examples/document_workflow.go

      - name: Test examples
        run: |
          ./bin/document_workflow

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
  build-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Build
        run: go build -v ./pkg/...

      - name: Test
        run: go test -v ./pkg/...
